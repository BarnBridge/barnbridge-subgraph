// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ManualEpochInit extends ethereum.Event {
  get params(): ManualEpochInit__Params {
    return new ManualEpochInit__Params(this);
  }
}

export class ManualEpochInit__Params {
  _event: ManualEpochInit;

  constructor(event: ManualEpochInit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get epochId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Staking extends ethereum.SmartContract {
  static bind(address: Address): Staking {
    return new Staking("Staking", address);
  }

  balanceOf(user: Address, token: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(user: Address, token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeNewMultiplier(
    prevBalance: BigInt,
    prevMultiplier: BigInt,
    amount: BigInt,
    currentMultiplier: BigInt
  ): BigInt {
    let result = super.call(
      "computeNewMultiplier",
      "computeNewMultiplier(uint256,uint128,uint256,uint128):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(prevBalance),
        ethereum.Value.fromUnsignedBigInt(prevMultiplier),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(currentMultiplier)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeNewMultiplier(
    prevBalance: BigInt,
    prevMultiplier: BigInt,
    amount: BigInt,
    currentMultiplier: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeNewMultiplier",
      "computeNewMultiplier(uint256,uint128,uint256,uint128):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(prevBalance),
        ethereum.Value.fromUnsignedBigInt(prevMultiplier),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(currentMultiplier)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEpochMultiplier(): BigInt {
    let result = super.call(
      "currentEpochMultiplier",
      "currentEpochMultiplier():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentEpochMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEpochMultiplier",
      "currentEpochMultiplier():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epoch1Start(): BigInt {
    let result = super.call("epoch1Start", "epoch1Start():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch1Start(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch1Start", "epoch1Start():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochDuration(): BigInt {
    let result = super.call("epochDuration", "epochDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochDuration",
      "epochDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochIsInitialized(token: Address, epochId: BigInt): boolean {
    let result = super.call(
      "epochIsInitialized",
      "epochIsInitialized(address,uint128):(bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(epochId)
      ]
    );

    return result[0].toBoolean();
  }

  try_epochIsInitialized(
    token: Address,
    epochId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "epochIsInitialized",
      "epochIsInitialized(address,uint128):(bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(epochId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentEpoch(): BigInt {
    let result = super.call(
      "getCurrentEpoch",
      "getCurrentEpoch():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentEpoch",
      "getCurrentEpoch():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochPoolSize(tokenAddress: Address, epochId: BigInt): BigInt {
    let result = super.call(
      "getEpochPoolSize",
      "getEpochPoolSize(address,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(epochId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getEpochPoolSize(
    tokenAddress: Address,
    epochId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochPoolSize",
      "getEpochPoolSize(address,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(epochId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochUserBalance(user: Address, token: Address, epochId: BigInt): BigInt {
    let result = super.call(
      "getEpochUserBalance",
      "getEpochUserBalance(address,address,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(epochId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getEpochUserBalance(
    user: Address,
    token: Address,
    epochId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochUserBalance",
      "getEpochUserBalance(address,address,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(epochId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _epoch1Start(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _epochDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class ManualEpochInitCall extends ethereum.Call {
  get inputs(): ManualEpochInitCall__Inputs {
    return new ManualEpochInitCall__Inputs(this);
  }

  get outputs(): ManualEpochInitCall__Outputs {
    return new ManualEpochInitCall__Outputs(this);
  }
}

export class ManualEpochInitCall__Inputs {
  _call: ManualEpochInitCall;

  constructor(call: ManualEpochInitCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get epochId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ManualEpochInitCall__Outputs {
  _call: ManualEpochInitCall;

  constructor(call: ManualEpochInitCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
